-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

# i2p-ssh-config

[![Build Status](https://travis-ci.org/eyedeekay/i2p-ssh-config.svg?branch=master)](https://travis-ci.org/eyedeekay/i2p-ssh-config)

Requires: [i2pd 2.21](https://github.com/purplei2p/i2pd/) and [genmkfile](https://github.com/whonix/genmkfile/)

Optionally can be used with: [samcatd](https://github.com/eyedeekay/sam-forwarder) and [java-i2p](https://geti2p.net), but
compatibility is momentarily limited due to the current shortcomings of samcatd.

Proof-of-Concept for an apt-installable ssh-over-i2p configuration using i2pd's
new tunnels.conf.d folder. It consists of an alternate set of configuration
files for OpenSSH and i2pd that automatically configures the sshd with fresh,
i2p-only keys, only on the localhost, on port 7622. Then it forwards that new
SSH service to the i2p network. All automatically. It doesn't have all the
features I want it to yet, but it should work. I have not tested the systemd
units yet.

The larger point is that with the use of /etc/i2pd/tunnels.conf.d instead of a
single monolithic tunnels.conf file, it becomes possible to express the
configuration of a service that you wish to forward to i2p as an easy-to-install
and easy-to create package. In this case it's OpenSSH sshd, but it could be any
service that could benefit from being routed using sshd.

Getting genmkfile from Whonix
- -----------------------------

genmkfile is pretty awesome for deterministically encapsulating configuration.

  1. Add [Whonix's Signing Key](https://www.whonix.org/wiki/Whonix_Signing_Key).

```sh
    sudo apt-key --keyring /etc/apt/trusted.gpg.d/whonix.gpg adv --keyserver hkp://ipv4.pool.sks-keyservers.net:80 --recv-keys 916B8D99C38EAF5E8ADC7A2A8D66066A2EEACCDA
```

  2. Add Whonix's APT repository.

```sh
echo "deb http://deb.whonix.org stretch main" | sudo tee /etc/apt/sources.list.d/whonix.list
```

  3. Update your package lists.

```sh
sudo apt-get update
```

  4. Install `genmkfile`.

```sh
sudo apt-get install genmkfile
```

Building the package yourself
- -----------------------------

If you have debuild and make installed, you can build the experimental package
by running

```sh
make deb
```
-----BEGIN PGP SIGNATURE-----

iQEzBAEBCAAdFiEEcNIGBzi++AUjrK/311wDs5teFOEFAlvr/7kACgkQ11wDs5te
FOE23QgAr9r+x5k+fbOvThH/MGP3o6Ku7BFi1J8E1tjFSb+5+OMdTniW1mUSwsqr
3h2wdwzXhRtLqwMP/KSoo/2n21EiOaDS7BdyW0aoDS+VwkWDVKQoOzhHlSjw22MD
GZHMz21aem1+N7zXMb2ToNdl4d85i4yeSs9KeSUmEP9xp1wlBZcXVFnUNguWyqCJ
1eBYO+AB38Mgspg8vJ5uAZDfcI2BTW5B2PNXfCyRomYpJxev1fD7pqDUq7+B/ZQ+
Dg3ATvF6XQBsexUxBiY1R/NPPYXZ92e52BydCyQwXP7hCVxtBovQN/0Wl0y50ZbA
rKRU6oK48H1C/vB8l6CUgSagnfG18w==
=iENo
-----END PGP SIGNATURE-----
